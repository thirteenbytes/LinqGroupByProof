// <auto-generated />
using System;
using LinqGroupByProof.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseFix.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241205024312_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatabaseFix.Domain.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActiveMemberPhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("ActiveMemberPhotoId")
                        .IsUnique()
                        .HasFilter("[ActiveMemberPhotoId] IS NOT NULL");

                    b.ToTable("Members", (string)null);
                });

            modelBuilder.Entity("DatabaseFix.Domain.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTaken")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Photos", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("DatabaseFix.Domain.GovernmentIdPhoto", b =>
                {
                    b.HasBaseType("DatabaseFix.Domain.Photo");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.ToTable("GovermentIdPhotos", (string)null);
                });

            modelBuilder.Entity("DatabaseFix.Domain.MemberPhoto", b =>
                {
                    b.HasBaseType("DatabaseFix.Domain.Photo");

                    b.ToTable("MemberPhotos", (string)null);
                });

            modelBuilder.Entity("DatabaseFix.Domain.Member", b =>
                {
                    b.HasOne("DatabaseFix.Domain.MemberPhoto", "ActiveMemberPhoto")
                        .WithOne("ActivePhotoMember")
                        .HasForeignKey("DatabaseFix.Domain.Member", "ActiveMemberPhotoId");

                    b.Navigation("ActiveMemberPhoto");
                });

            modelBuilder.Entity("DatabaseFix.Domain.Photo", b =>
                {
                    b.HasOne("DatabaseFix.Domain.Member", "Member")
                        .WithMany("Photos")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("DatabaseFix.Domain.GovernmentIdPhoto", b =>
                {
                    b.HasOne("DatabaseFix.Domain.Photo", null)
                        .WithOne()
                        .HasForeignKey("DatabaseFix.Domain.GovernmentIdPhoto", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseFix.Domain.MemberPhoto", b =>
                {
                    b.HasOne("DatabaseFix.Domain.Photo", null)
                        .WithOne()
                        .HasForeignKey("DatabaseFix.Domain.MemberPhoto", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseFix.Domain.Member", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("DatabaseFix.Domain.MemberPhoto", b =>
                {
                    b.Navigation("ActivePhotoMember");
                });
#pragma warning restore 612, 618
        }
    }
}
